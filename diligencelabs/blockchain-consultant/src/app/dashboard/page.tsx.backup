"use client"

import { useSession } from "next-auth/react"
import { useRouter } from "next/navigation"
import { useEffect, useState, useCallback, useMemo } from "react"
import Link from "next/link"
import { useUnifiedAuth } from "@/components/providers/unified-auth-provider"
import { useAccount, useConnect, useDisconnect } from "wagmi"
import { ConnectButton } from "@rainbow-me/rainbowkit"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Logo } from "@/components/ui/logo"
import { DashboardErrorBoundary } from "@/components/ui/error-boundary"
import { PageLoading, CardSkeleton } from "@/components/ui/loading-states"
import { 
  PageWrapper, 
  GlassMorphismCard, 
  FloatingOrb,
  theme,
  animations,
  staggerContainer,
  staggerItem
} from "@/components/ui/consistent-theme"
import { SubtleBorder } from "@/components/ui/border-effects"
import { HorizontalDivider } from "@/components/ui/section-divider"
import { motion } from "framer-motion"
import dynamic from "next/dynamic"
import { EnhancedDashboardStats } from "@/components/dashboard/enhanced-dashboard-stats"
import { RealtimeNotifications } from "@/components/dashboard/realtime-notifications"
import { InteractiveCharts } from "@/components/dashboard/interactive-charts"



// Lazy load background components for better initial load
const FloatingElementsLazy = dynamic(() => import("@/components/ui/animated-background").then(mod => ({ default: mod.FloatingElements })), {
  ssr: false,
  loading: () => null
})

const ParallaxBackgroundLazy = dynamic(() => import("@/components/ui/parallax-background").then(mod => ({ default: mod.ParallaxBackground })), {
  ssr: false,
  loading: () => null
})

function DashboardContent() {
  const { data: session, status } = useSession()
  const { user: unifiedUser, isLoading: unifiedLoading, isAuthenticated, logout } = useUnifiedAuth()
  // Enable wallet functionality
  const { address, isConnected } = useAccount()
  const { disconnect } = useDisconnect()
  const [isPageLoaded, setIsPageLoaded] = useState(false)
  const [subscriptionData, setSubscriptionData] = useState<any>(null)
  const [creditBalance, setCreditBalance] = useState<any>(null)
  const router = useRouter()

  useEffect(() => {
    // Wait for both auth systems to be ready
    if (status === "loading" || unifiedLoading) return
    
    console.log('Dashboard auth check:', { 
      nextAuthStatus: status, 
      hasSession: !!session, 
      userId: session?.user?.id,
      isAuthenticated, 
      unifiedLoading 
    })
    
    // Prioritize NextAuth session for traditional login
    if (status === "authenticated" && session?.user) {
      console.log('NextAuth session valid, loading dashboard')
      setIsPageLoaded(true)
      fetchSubscriptionData()
    } else if (isAuthenticated && status !== "authenticated") {
      // Only use unified auth if NextAuth is not authenticated
      console.log('Unified auth valid, loading dashboard')
      setIsPageLoaded(true)
      fetchSubscriptionData()
    } else if (status === "unauthenticated" && !isAuthenticated && !unifiedLoading) {
      // Only redirect if both auth systems confirm no authentication
      console.log('No authentication found, redirecting to login')
      router.push("/auth/unified-signin")
    }
    // If still loading or in transition state, wait
  }, [session, status, isAuthenticated, unifiedLoading, router])

  const fetchSubscriptionData = useCallback(async () => {
    if (!session) return
    
    try {
      const [subscriptionResponse, usageResponse] = await Promise.all([
        fetch('/api/subscriptions/manage'),
        fetch('/api/subscriptions/usage')
      ])

      if (subscriptionResponse.ok) {
        const subscriptionData = await subscriptionResponse.json()
        setSubscriptionData(subscriptionData.subscription)
      }

      if (usageResponse.ok) {
        const usageData = await usageResponse.json()
        setCreditBalance(usageData.creditBalance)
      }
    } catch (error) {
      console.error("Failed to fetch subscription data:", error)
    }
  }, [session])

  // Handle wallet connection sync
  useEffect(() => {
    const syncWalletAddress = async () => {
      if (isConnected && address && session?.user?.id) {
        try {
          const response = await fetch('/api/user/wallet', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ walletAddress: address }),
          })
          
          if (response.ok) {
            console.log('Wallet address synced successfully')
          } else {
            console.error('Failed to sync wallet address')
          }
        } catch (error) {
          console.error('Error syncing wallet address:', error)
        }
      }
    }

    syncWalletAddress()
  }, [isConnected, address, session?.user?.id])

  const handleDisconnectWallet = useCallback(async () => {
    try {
      // Disconnect from wagmi
      disconnect()
      
      // Remove from user profile
      const response = await fetch('/api/user/wallet', {
        method: 'DELETE',
      })
      
      if (response.ok) {
        console.log('Wallet disconnected successfully')
      }
    } catch (error) {
      console.error('Failed to disconnect wallet:', error)
    }
  }, [disconnect])


  // Enhanced loading states
  if (status === "loading" || unifiedLoading) {
    return (
      <PageWrapper>
        <div className="container mx-auto px-4 py-8">
          <div className="space-y-8">
            {/* Header Skeleton */}
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              <div className="space-y-4">
                <div className="h-8 bg-gray-800/50 rounded-lg w-48 animate-pulse"></div>
                <div className="h-12 bg-gray-800/50 rounded-lg w-96 animate-pulse"></div>
                <div className="h-6 bg-gray-800/50 rounded-lg w-80 animate-pulse"></div>
              </div>
              <div className="flex items-center gap-4">
                <div className="h-10 bg-gray-800/50 rounded-lg w-32 animate-pulse"></div>
                <div className="h-10 bg-gray-800/50 rounded-lg w-24 animate-pulse"></div>
              </div>
            </div>
            
            {/* Stats Cards Skeleton */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {[...Array(4)].map((_, i) => (
                <div key={i} className="h-32 bg-gray-800/50 rounded-xl animate-pulse"></div>
              ))}
            </div>
            
            {/* Main Cards Skeleton */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="h-80 bg-gray-800/50 rounded-xl animate-pulse"></div>
              ))}
            </div>
          </div>
        </div>
      </PageWrapper>
    )
  }

  // Enhanced error states
  if (!isAuthenticated && !session?.user && status === "unauthenticated") {
    return (
      <PageWrapper>
        <div className="container mx-auto px-4 py-8">
          <div className="text-center py-16">
            <svg className="w-16 h-16 text-gray-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
            <h2 className="text-xl font-semibold text-white mb-2">Authentication Required</h2>
            <p className="text-gray-400 mb-6">Please sign in to access your dashboard</p>
            <Link href="/auth/unified-signin">
              <Button className="bg-blue-600 hover:bg-blue-700">
                Sign In
              </Button>
            </Link>
          </div>
        </div>
      </PageWrapper>
    )
  }

  return (
    <DashboardErrorBoundary>
      <PageWrapper>
        <div className="container mx-auto px-4 py-8">
        {/* Enhanced Header with Breadcrumbs */}
        <motion.div 
          {...animations.slideDown}
          transition={{ duration: 0.8 }}
          className="mb-12"
        >
          {/* Breadcrumb Navigation */}
          <motion.nav 
            {...animations.fadeIn}
            transition={{ duration: 0.4 }}
            className="mb-6"
            aria-label="Breadcrumb"
          >
            <ol className="flex items-center space-x-2 text-sm">
              <li>
                <Link href="/" className="text-gray-400 hover:text-white transition-colors">
                  Home
                </Link>
              </li>
              <li className="text-gray-600">/</li>
              <li className="text-white font-medium" aria-current="page">
                Dashboard
              </li>
            </ol>
          </motion.nav>

          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
            <div>
              <motion.div 
                {...animations.fadeIn}
                transition={{ duration: 0.6, delay: 0.2 }}
                className="flex items-center gap-4 mb-6"
              >
                <Logo size="xl" href={null} />
                <div className="w-px h-8 bg-gray-600"></div>
                <div className="flex flex-col">
                  <div className="text-lg text-gray-400">Dashboard</div>
                  <div className="text-xs text-gray-500">Blockchain Consulting Platform</div>
                </div>
              </motion.div>
              <motion.h1 
                {...animations.slideUp}
                transition={{ duration: 0.6, delay: 0.4 }}
                className="text-4xl lg:text-5xl font-light mb-3"
              >
                Welcome back, <span className="font-normal bg-gradient-to-r from-orange-400 to-orange-300 bg-clip-text text-transparent">
                  {unifiedUser?.name || 'User'}
                </span>
              </motion.h1>
              <motion.p 
                {...animations.slideUp}
                transition={{ duration: 0.6, delay: 0.6 }}
                className="text-gray-400 text-lg max-w-2xl leading-relaxed"
              >
                Access your blockchain consulting services, track your sessions, and manage your advisory needs from one central hub.
              </motion.p>
            </div>
            <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
              {/* Enhanced Wallet Connection */}
              <div className="flex items-center gap-3">
                {isConnected && address ? (
                  <div className="flex items-center gap-3 p-2 bg-gray-800/50 rounded-xl border border-gray-700">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                      <span className="text-xs text-gray-300">Wallet Connected</span>
                    </div>
                    <div className="px-3 py-1 text-xs bg-green-500/20 text-green-400 rounded-lg border border-green-500/30 font-mono">
                      {address.slice(0, 6)}...{address.slice(-4)}
                    </div>
                    <Button 
                      onClick={handleDisconnectWallet}
                      variant="ghost" 
                      size="sm" 
                      className="text-red-400 hover:text-red-300 hover:bg-red-500/10 transition-all duration-300 h-8 px-3"
                      aria-label="Disconnect wallet"
                    >
                      Disconnect
                    </Button>
                  </div>
                ) : (
                  <ConnectButton.Custom>
                  {({
                    account,
                    chain,
                    openAccountModal,
                    openChainModal,
                    openConnectModal,
                    authenticationStatus,
                    mounted,
                  }) => {
                    const ready = mounted && authenticationStatus !== 'loading'
                    const connected = ready && account && chain && (!authenticationStatus || authenticationStatus === 'authenticated')

                    return (
                      <div
                        {...(!ready && {
                          'aria-hidden': true,
                          'style': {
                            opacity: 0,
                            pointerEvents: 'none',
                            userSelect: 'none',
                          },
                        })}
                      >
                        {(() => {
                          if (!connected) {
                            return (
                              <Button 
                                onClick={openConnectModal} 
                                variant="outline" 
                                size="sm"
                                className="border-blue-600 text-blue-400 hover:bg-blue-500/10 transition-all duration-300"
                              >
                                Connect Wallet
                              </Button>
                            )
                          }

                          return (
                            <div className="flex items-center gap-2">
                              <div className="px-3 py-1 text-xs bg-green-500/20 text-green-400 rounded-lg border border-green-500/30 font-mono">
                                {account.address.slice(0, 6)}...{account.address.slice(-4)}
                              </div>
                              <Button 
                                onClick={handleDisconnectWallet}
                                variant="ghost" 
                                size="sm" 
                                className="text-red-400 hover:text-red-300 hover:bg-red-500/10 transition-all duration-300"
                              >
                                Disconnect
                              </Button>
                            </div>
                          )
                        })()}
                      </div>
                    )
                  }}
                </ConnectButton.Custom>
              )}
            </div>
            
              {/* Enhanced Notification and Action Bar */}
              <div className="flex items-center gap-3">
                {unifiedUser && (
                  <RealtimeNotifications
                    userId={unifiedUser.id}
                    className="mr-1"
                  />
                )}
                
                <Link href="/dashboard/profile">
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="text-gray-300 hover:text-white hover:bg-gray-800 transition-all duration-300 h-9 px-4"
                    aria-label="Go to profile"
                  >
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    Profile
                  </Button>
                </Link>
                <Button 
                  onClick={() => logout()} 
                  variant="outline" 
                  className="border-gray-600 text-gray-300 hover:bg-gray-800 hover:border-gray-500 transition-all duration-300 h-9 px-4"
                  aria-label="Sign out"
                >
                  <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                  </svg>
                  Sign Out
                </Button>
              </div>
            </div>
          </div>
        </motion.div>

        {/* Subscription Status Banner */}
        {subscriptionData && (
          <div className={`mb-8 transition-all duration-1000 delay-200 ${isPageLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            <SubtleBorder className="rounded-xl overflow-hidden" animated={true} movingBorder={true}>
              <div className="relative group bg-gradient-to-br from-blue-900/60 to-blue-800/30 backdrop-blur-xl rounded-xl">
                <div className="absolute inset-0 opacity-0 group-hover:opacity-20 transition-all duration-700 rounded-xl bg-gradient-to-br from-blue-500/20 to-cyan-500/20" />
                <Card className="bg-transparent border-0 relative z-10">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
                          <svg className="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                          </svg>
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-white">
                            {subscriptionData.planType.replace('_', ' ').toLowerCase().replace(/\b\w/g, (l: string) => l.toUpperCase())} Plan
                          </h3>
                          <p className="text-sm text-gray-400">
                            Status: <span className="text-green-400 font-medium">{subscriptionData.status}</span> 
                            {creditBalance && (
                              <span className="ml-4">
                                Credits: <span className="text-blue-400 font-medium">
                                  {creditBalance.isUnlimited ? '∞' : creditBalance.remainingCredits}
                                </span>
                              </span>
                            )}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <div className="text-right">
                          <p className="text-sm text-gray-400">Next billing</p>
                          <p className="text-white font-medium">
                            {new Date(subscriptionData.currentPeriodEnd).toLocaleDateString()}
                          </p>
                        </div>
                        <Link href="/dashboard/profile">
                          <Button variant="outline" size="sm" className="border-blue-500/50 text-blue-400 hover:bg-blue-500/10 hover:border-blue-400 transition-all duration-300">
                            Manage
                          </Button>
                        </Link>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </SubtleBorder>
          </div>
        )}

        {/* Enhanced Dashboard Stats */}
        {unifiedUser && (
          <div className={`mb-12 transition-all duration-1000 delay-300 ${isPageLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            <EnhancedDashboardStats userId={unifiedUser.id} />
          </div>
        )}

        {/* Section Divider */}
        <HorizontalDivider style="subtle" />

        {/* Interactive Charts & Analytics */}
        {unifiedUser && (
          <div className={`mb-12 transition-all duration-1000 delay-400 ${isPageLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            <InteractiveCharts userId={unifiedUser.id} timeRange="30d" />
          </div>
        )}

        {/* Main Action Cards - Enhanced UX */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-semibold text-white">Quick Actions</h2>
            <Badge variant="outline" className="text-gray-400 border-gray-600">
              {/* Show session count or status */}
              Active
            </Badge>
          </div>
          
          <motion.div 
            variants={staggerContainer}
            initial="initial"
            animate="animate"
            className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 transition-all duration-1000 delay-500 ${isPageLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}
            role="region"
            aria-label="Dashboard quick actions"
          >
            {/* 1. Book Consultation - Primary CTA */}
            <motion.div variants={staggerItem} className="md:col-span-2 lg:col-span-1">
              <GlassMorphismCard variant="primary" hover={true} className="h-full group">
                <Card className="bg-transparent border-0 shadow-2xl h-full overflow-hidden">
                  <CardHeader className="relative z-10 pb-4">
                    <div className="flex items-start justify-between mb-4">
                      <motion.div 
                        whileHover={animations.hover}
                        className="w-16 h-16 bg-gradient-to-br from-blue-500/30 to-cyan-500/30 border border-blue-500/40 rounded-2xl flex items-center justify-center transition-all duration-300 group-hover:scale-110"
                        role="img"
                        aria-label="Calendar icon"
                      >
                        <svg className="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                      </motion.div>
                      <Badge className="bg-blue-500/10 text-blue-400 border-blue-500/20 text-xs">
                        Priority
                      </Badge>
                    </div>
                    <CardTitle className="text-2xl text-white group-hover:text-blue-100 transition-colors duration-300 mb-2">
                      Book Consultation
                    </CardTitle>
                    <CardDescription className="text-gray-400 text-base">
                      Start your blockchain journey with expert guidance
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="relative z-10 flex-1 flex flex-col justify-between pt-0">
                    <div className="mb-6">
                      <p className="text-gray-300 mb-4 leading-relaxed">
                        Schedule personalized sessions for blockchain strategy, token launches, smart contracts, and technology decisions.
                      </p>
                      <div className="flex items-center gap-2 text-sm text-gray-400">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span>30-60 min sessions</span>
                      </div>
                    </div>
                    <Link href="/dashboard/book-consultation" className="w-full">
                      <motion.div whileHover={animations.hover} whileTap={animations.tap}>
                        <Button 
                          className={`w-full bg-gradient-to-r ${theme.gradients.secondary} hover:from-blue-700 hover:to-cyan-700 text-white ${theme.shadows.secondary} hover:${theme.shadows.secondaryHover} transition-all duration-300 h-12 text-base font-medium`}
                          aria-label="Schedule a consultation session"
                        >
                          Schedule Session
                          <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </Button>
                      </motion.div>
                    </Link>
                  </CardContent>
                </Card>
              </GlassMorphismCard>
            </motion.div>

            {/* 2. My Sessions */}
            <motion.div variants={staggerItem}>
              <GlassMorphismCard variant="accent" hover={true} className="h-full group">
                <Card className="bg-transparent border-0 shadow-2xl h-full">
                  <CardHeader className="relative z-10 pb-4">
                    <div className="flex items-start justify-between mb-4">
                      <motion.div 
                        whileHover={animations.hover}
                        className="w-16 h-16 bg-gradient-to-br from-purple-500/30 to-pink-500/30 border border-purple-500/40 rounded-2xl flex items-center justify-center transition-all duration-300 group-hover:scale-110"
                        role="img"
                        aria-label="Sessions icon"
                      >
                        <svg className="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                        </svg>
                      </motion.div>
                      <Badge className="bg-purple-500/10 text-purple-400 border-purple-500/20 text-xs">
                        Active
                      </Badge>
                    </div>
                    <CardTitle className="text-2xl text-white group-hover:text-purple-100 transition-colors duration-300 mb-2">
                      My Sessions
                    </CardTitle>
                    <CardDescription className="text-gray-400 text-base">
                      Track and manage your consultations
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="relative z-10 flex-1 flex flex-col justify-between pt-0">
                    <div className="mb-6">
                      <p className="text-gray-300 mb-4 leading-relaxed">
                        Access session notes, recordings, action items, and follow-up recommendations from all consultations.
                      </p>
                      <div className="flex items-center gap-2 text-sm text-gray-400">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <span>Notes & recordings</span>
                      </div>
                    </div>
                    <Link href="/dashboard/sessions" className="w-full">
                      <motion.div whileHover={animations.hover} whileTap={animations.tap}>
                        <Button 
                          variant="outline" 
                          className={`w-full ${theme.borders.neutral} text-gray-300 hover:bg-white/10 hover:text-white backdrop-blur-sm transition-all duration-300 ${theme.borders.hover} h-12 text-base font-medium`}
                          aria-label="View consultation sessions"
                        >
                          View Sessions
                          <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </Button>
                      </motion.div>
                    </Link>
                  </CardContent>
                </Card>
              </GlassMorphismCard>
            </motion.div>

            {/* 3. Reports & Analytics */}
            <motion.div variants={staggerItem}>
              <GlassMorphismCard variant="secondary" hover={true} className="h-full group">
                <Card className="bg-transparent border-0 shadow-2xl h-full">
                  <CardHeader className="relative z-10 pb-4">
                    <div className="flex items-start justify-between mb-4">
                      <motion.div 
                        whileHover={animations.hover}
                        className="w-16 h-16 bg-gradient-to-br from-green-500/30 to-emerald-500/30 border border-green-500/40 rounded-2xl flex items-center justify-center transition-all duration-300 group-hover:scale-110"
                        role="img"
                        aria-label="Reports icon"
                      >
                        <svg className="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                      </motion.div>
                      <Badge className="bg-green-500/10 text-green-400 border-green-500/20 text-xs">
                        Ready
                      </Badge>
                    </div>
                    <CardTitle className="text-2xl text-white group-hover:text-green-100 transition-colors duration-300 mb-2">
                      Reports & Analytics
                    </CardTitle>
                    <CardDescription className="text-gray-400 text-base">
                      Due diligence & market analysis
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="relative z-10 flex-1 flex flex-col justify-between pt-0">
                    <div className="mb-6">
                      <p className="text-gray-300 mb-4 leading-relaxed">
                        Access comprehensive due diligence reports, market analysis, and technical assessments from your consultations.
                      </p>
                      <div className="flex items-center gap-2 text-sm text-gray-400">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <span>PDF downloads</span>
                      </div>
                    </div>
                    <Link href="/dashboard/reports" className="w-full">
                      <motion.div whileHover={animations.hover} whileTap={animations.tap}>
                        <Button 
                          variant="outline" 
                          className={`w-full ${theme.borders.neutral} text-gray-300 hover:bg-white/10 hover:text-white backdrop-blur-sm transition-all duration-300 ${theme.borders.hover} h-12 text-base font-medium`}
                          aria-label="View reports and analytics"
                        >
                          View Reports
                          <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </Button>
                      </motion.div>
                    </Link>
                  </CardContent>
                </Card>
              </GlassMorphismCard>
            </motion.div>
          </motion.div>
        </div>

        {/* Section Divider */}
        <HorizontalDivider style="subtle" />

        {/* Enhanced Profile & Account Section */}
        <section 
          className={`transition-all duration-1000 delay-700 ${isPageLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}
          aria-labelledby="account-settings-heading"
        >
          <div className="text-center mb-10">
            <h2 id="account-settings-heading" className="text-3xl font-light mb-3">
              <span className="font-normal text-white">Account & Settings</span>
            </h2>
            <p className="text-gray-400 text-lg max-w-2xl mx-auto">
              Manage your profile, account preferences, and quick access to key features
            </p>
          </div>

          <motion.div 
            variants={staggerContainer}
            initial="initial"
            animate="animate"
            className="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto"
          >
            {/* Enhanced Account Overview */}
            <motion.div variants={staggerItem}>
              <GlassMorphismCard variant="neutral" hover={true} className="h-full">
                <Card className="bg-transparent border-0 shadow-2xl h-full">
                  <CardHeader className="pb-4">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 bg-gradient-to-br from-gray-500/30 to-gray-600/30 border border-gray-500/40 rounded-xl flex items-center justify-center">
                          <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                        </div>
                        <div>
                          <CardTitle className="text-xl text-white mb-1">Account Overview</CardTitle>
                          <p className="text-sm text-gray-400">Your profile information</p>
                        </div>
                      </div>
                      <Badge className="bg-green-500/10 text-green-400 border-green-500/20 text-xs">
                        Active
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-6 pt-0">
                    <div className="space-y-3">
                      <div className="group p-4 bg-gray-800/30 rounded-xl border border-gray-700/50 hover:border-gray-600/50 transition-all duration-200">
                        <div className="flex justify-between items-start">
                          <div className="flex items-center gap-3">
                            <svg className="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                            </svg>
                            <div>
                              <span className="text-sm font-medium text-gray-300">Email Address</span>
                              <div className="text-sm text-gray-400 break-all">{unifiedUser?.email}</div>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <div className="group p-4 bg-gray-800/30 rounded-xl border border-gray-700/50 hover:border-gray-600/50 transition-all duration-200">
                        <div className="flex justify-between items-start">
                          <div className="flex items-center gap-3">
                            <svg className="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                            <div>
                              <span className="text-sm font-medium text-gray-300">Display Name</span>
                              <div className="text-sm text-gray-400">{unifiedUser?.name || "Not set"}</div>
                            </div>
                          </div>
                        </div>
                      </div>

                      {unifiedUser?.walletAddress && (
                        <div className="group p-4 bg-gray-800/30 rounded-xl border border-gray-700/50 hover:border-gray-600/50 transition-all duration-200">
                          <div className="flex justify-between items-start">
                            <div className="flex items-center gap-3">
                              <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                              </svg>
                              <div>
                                <span className="text-sm font-medium text-gray-300">Connected Wallet</span>
                                <div className="text-xs text-gray-400 font-mono bg-gray-700/50 px-2 py-1 rounded mt-1 inline-block">
                                  {unifiedUser.walletAddress.slice(0, 6)}...{unifiedUser.walletAddress.slice(-4)}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    <div className="pt-6 border-t border-gray-700">
                      <Link href="/dashboard/profile" className="w-full">
                        <motion.div whileHover={animations.hover} whileTap={animations.tap}>
                          <Button 
                            variant="outline" 
                            className={`w-full ${theme.borders.neutral} text-gray-300 hover:bg-gray-800/50 hover:text-white ${theme.borders.hover} h-11 text-base font-medium`}
                            aria-label="Manage your profile settings"
                          >
                            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                            Manage Profile
                          </Button>
                        </motion.div>
                      </Link>
                    </div>
                  </CardContent>
                </Card>
              </GlassMorphismCard>
            </motion.div>

            {/* Enhanced Quick Navigation */}
            <motion.div variants={staggerItem}>
              <GlassMorphismCard variant="primary" hover={true} className="h-full">
                <Card className="bg-transparent border-0 shadow-2xl h-full">
                  <CardHeader className="pb-4">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-500/30 to-cyan-500/30 border border-blue-500/40 rounded-xl flex items-center justify-center">
                          <svg className="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                          </svg>
                        </div>
                        <div>
                          <CardTitle className="text-xl text-white mb-1">Quick Actions</CardTitle>
                          <p className="text-sm text-gray-400">Fast access to key features</p>
                        </div>
                      </div>
                      <Badge className="bg-blue-500/10 text-blue-400 border-blue-500/20 text-xs">
                        4 Actions
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3 pt-0">
                    <nav aria-label="Quick navigation menu">
                      <ul className="space-y-3">
                        <li>
                          <Link href="/dashboard/book-consultation" className="w-full block">
                            <motion.div whileHover={animations.hover} whileTap={animations.tap}>
                              <Button 
                                variant="outline" 
                                className={`w-full justify-start ${theme.borders.neutral} text-gray-300 hover:bg-gray-800/50 hover:text-white ${theme.borders.hover} h-12 text-base font-medium group`}
                                aria-label="Schedule a new consultation"
                              >
                                <svg className="w-5 h-5 mr-3 text-blue-400 group-hover:text-blue-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                Schedule Consultation
                              </Button>
                            </motion.div>
                          </Link>
                        </li>
                        <li>
                          <Link href="/dashboard/sessions" className="w-full block">
                            <motion.div whileHover={animations.hover} whileTap={animations.tap}>
                              <Button 
                                variant="outline" 
                                className={`w-full justify-start ${theme.borders.neutral} text-gray-300 hover:bg-gray-800/50 hover:text-white ${theme.borders.hover} h-12 text-base font-medium group`}
                                aria-label="View your consultation sessions"
                              >
                                <svg className="w-5 h-5 mr-3 text-purple-400 group-hover:text-purple-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                </svg>
                                My Sessions
                              </Button>
                            </motion.div>
                          </Link>
                        </li>
                        <li>
                          <Link href="/dashboard/reports" className="w-full block">
                            <motion.div whileHover={animations.hover} whileTap={animations.tap}>
                              <Button 
                                variant="outline" 
                                className={`w-full justify-start ${theme.borders.neutral} text-gray-300 hover:bg-gray-800/50 hover:text-white ${theme.borders.hover} h-12 text-base font-medium group`}
                                aria-label="Access your reports and analytics"
                              >
                                <svg className="w-5 h-5 mr-3 text-green-400 group-hover:text-green-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                                </svg>
                                View Reports
                              </Button>
                            </motion.div>
                          </Link>
                        </li>
                        <li>
                          <Link href="/dashboard/profile" className="w-full block">
                            <motion.div whileHover={animations.hover} whileTap={animations.tap}>
                              <Button 
                                variant="outline" 
                                className={`w-full justify-start ${theme.borders.neutral} text-gray-300 hover:bg-gray-800/50 hover:text-white ${theme.borders.hover} h-12 text-base font-medium group`}
                                aria-label="Manage account settings"
                              >
                                <svg className="w-5 h-5 mr-3 text-orange-400 group-hover:text-orange-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                Account Settings
                              </Button>
                            </motion.div>
                          </Link>
                        </li>
                      </ul>
                    </nav>
                  </CardContent>
                </Card>
              </GlassMorphismCard>
            </motion.div>
          </motion.div>
        </section>
        </div>
      </PageWrapper>
    </DashboardErrorBoundary>
  )
}

export default function Dashboard() {
  return <DashboardContent />
}