{"_id":"@paulmillr/qr","_rev":"6-74d6470de96b385b47f62a73b0aced17","name":"@paulmillr/qr","dist-tags":{"latest":"0.3.0"},"versions":{"0.1.0":{"name":"@paulmillr/qr","version":"0.1.0","keywords":["qr","code","qr code","qr pattern","qr generator","qr reader","ascii","gif","svg","camera","file"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"(MIT OR Apache-2.0)","_id":"@paulmillr/qr@0.1.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/qr","bugs":{"url":"https://github.com/paulmillr/qr/issues"},"dist":{"shasum":"d614f58dc5289c9f54f1c8462d7785993061d98d","tarball":"https://registry.npmjs.org/@paulmillr/qr/-/qr-0.1.0.tgz","fileCount":12,"integrity":"sha512-7LTE/5COEUfp7jOBbHUMSXMgZb5zPLICGpZedROw9H3b/w7yEIO0vZNsWxS34i/KRcf7C84dh+3IXUE9SK2lpw==","signatures":[{"sig":"MEQCIQDTCWSFASYeAabfxl/BwEuxpeC/hC7n1p99C2w875IG7QIfdWgEa3hIcmbQMaMkQYANXVQu1m1PVRgt/kv6oKAy4A==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":178603,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkClBCACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo5Aw//QhyUyw2v3bhGydNfsFNoFyiAisEInbWG4b8UC/s5qh7cdJa4\r\nFcXG6x0F4h4ir6tXEWSZJdgJfTLw5U/ERoyFznCQokDQlnNlG7mcVHfsr43o\r\n+4q3a7HB03TXi0sArTzEYWiIZun/3wqUqb1RYhR0s5npcvwX2dnHZ7C48kLr\r\nWzk6zS4UNvRmwpjzcxlIZ5XmACFJEr07FMWlbTIZsKqxbwiUJO5IIkUwUW1D\r\nLfhDOsCNTL9CwKmN6Hq+MP0nHPo+kfjzCgXpPAFnfFq5NrYy1Bb/N3aPJcnD\r\nWpvLA/WS0ame+s7WUleNqGgu4MiJkQq/tCRJbvS8cwOiYCDRP43FE9OH3jCE\r\no6N7cQeWDcVtzIPQi91lsBRuyWaKCYE+bS+sn95ktOoblh0F9bXHsiCe7Hsh\r\njBrKzfHjGhZitY1rbRkLkESAYXxapFUgoQmuKlmtmVst+MPlYLWtG5m7fA4/\r\nkjEzI6kuA90iLjvks8cVyNopmwqWSOzL2UpTJMErXagzOGU3ZEY5TzhMFPhK\r\nOn3u33XjvmKMrhcV4BZ3HluMg+VD9LVYeQpIV0EkuxC47drBrnaCRKxa0nCp\r\nGSZdhqX9du3ZIRkxwI3CYzbhoembq0FwyQJu8iE7VEaMk9k2yTWAZLvqNyZi\r\nfp3DqTymyJM7alGnyKP/Ib08tzjtbxeoKOo=\r\n=Y+AN\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":[{"url":"https://paulmillr.com/funding/","type":"individual"}],"gitHead":"3facdabd4ff225bd32a298e426d05336ae562152","scripts":{"lint":"prettier --check index.ts","test":"node test/index.test.js","build":"tsc"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/qr.git","type":"git"},"_npmVersion":"9.3.1","description":"Minimal node.js & browser QR Code Pattern reader and generator. Supports ascii, term, gif and svg formats","directories":{},"_nodeVersion":"18.14.0","_hasShrinkwrap":false,"devDependencies":{"omggif":"1.0.10","jpeg-js":"0.4.4","prettier":"2.6.2","typescript":"4.7.3","micro-should":"0.4.0"},"_npmOperationalInternal":{"tmp":"tmp/qr_0.1.0_1678397506366_0.11799342847794048","host":"s3://npm-registry-packages"},"deprecated":"The package is now available as \"qr\": npm install qr"},"0.1.1":{"name":"@paulmillr/qr","version":"0.1.1","keywords":["qr","code","qr code","qr pattern","qr generator","qr reader","ascii","gif","svg","camera","file"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"(MIT OR Apache-2.0)","_id":"@paulmillr/qr@0.1.1","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/qr","bugs":{"url":"https://github.com/paulmillr/qr/issues"},"dist":{"shasum":"a653ac45c6df8718090496659443315b87e02154","tarball":"https://registry.npmjs.org/@paulmillr/qr/-/qr-0.1.1.tgz","fileCount":12,"integrity":"sha512-lwGH6AvdzirFYxDi5vtCtAHcvuFpvfGhLi4eUiriTwTxnpoXLHT88faw+y6ABP08Z+Yfqx0GB5ai49F6iW8s9Q==","signatures":[{"sig":"MEYCIQDZCLfLbgLSp3Sbv9+bXY+hwSPNpPVyU0fruUjPxa+iqQIhAMt46NGCDBkwLro4lserTJ09X0YrUZBZdusS3x1I+HPU","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":179267,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkTwWVACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo/MhAAo9HMcx+3M6VsrSczdCLyJpn4tNL1rz/krOk/DNbR8ymEXQ81\r\n3W63aDtecVnB+d4erG55x1w2yetBbrNex5lR0RW2W5OkPduaoVn3mYhktgjT\r\nh71RQ5wDG1szUGZQT7Jv32wc3DaSpRpXeJiQPjMo2lmMv830JDpXS9nJIehN\r\np9dg07SRKafOIZ091ey9WaPVqNAZm4LAO5dk8RfXbLloQHpC0Pk01vW1jUjh\r\nzb07RwS+JQrko/3+syvd+TlmSAYxiYOmtMnkigNxoe/TmEI8FHbQpy1edC8D\r\nDc/wURwAnd0JAJwmzMtA+xt1PwS0gSmoDrJCkfUo4+BdHNLPfiU3+O6SyxdZ\r\nY71CJAJl8AjpH0IrxjghNxWQ8mE1eJfRUVZC3d69E02pusTzgkHWTwqBsBLu\r\nGw9p7TInrB0M2E7bHmQI8YkdprPmdMlVUSIjvIvjnYoBYH4kfulCdP+I/MeN\r\n5C2NYLnkBEayqgri85AVnEjEp9BciUDTXQFTNj961Y/dR5PQ9qXDbHRTOmna\r\nL2NT+jS0d8VVkvm9lnMBSyaIX/e+BS7MvCwJuxSpmk4v8qU+SujO6/0urIv9\r\nLDQYnvwzI+h9HlZn3jKuBVCq3/h2qo9uq9HSf5bHqqI0gDJBF1WVmUkYz8uk\r\nY1ofv2heVhYEd7IyO8RDBsi/G3FHMrp2CaE=\r\n=9U1c\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":[{"url":"https://paulmillr.com/funding/","type":"individual"}],"gitHead":"d3aebb1c5c5362e8a92f878f52b2dca55f3a3cc2","scripts":{"lint":"prettier --check index.ts","test":"node test/index.test.js","build":"tsc"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/qr.git","type":"git"},"_npmVersion":"9.6.4","description":"Minimal node.js & browser QR Code Pattern reader and generator. Supports ascii, term, gif and svg formats","directories":{},"_nodeVersion":"20.0.0","_hasShrinkwrap":false,"devDependencies":{"omggif":"1.0.10","jpeg-js":"0.4.4","prettier":"2.8.4","typescript":"5.0.2","micro-should":"0.4.0"},"_npmOperationalInternal":{"tmp":"tmp/qr_0.1.1_1682900373476_0.010904234863127638","host":"s3://npm-registry-packages"},"deprecated":"The package is now available as \"qr\": npm install qr"},"0.2.0":{"name":"@paulmillr/qr","version":"0.2.0","keywords":["qr","code","qr code","qr pattern","qr generator","qr reader","ascii","gif","svg","camera","file"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"(MIT OR Apache-2.0)","_id":"@paulmillr/qr@0.2.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/qr","bugs":{"url":"https://github.com/paulmillr/qr/issues"},"dist":{"shasum":"2a96b39bbd38d514381567b8caf03a1ef1c61c27","tarball":"https://registry.npmjs.org/@paulmillr/qr/-/qr-0.2.0.tgz","fileCount":10,"integrity":"sha512-QuH8+wgtq+G3zED8O29r71bnzPdKzk++zYlUPCmh7VrGNaIZhZttyojODLCCybiIGD3Y7ujSHwjaLq1Dq2IBNg==","signatures":[{"sig":"MEQCIEURlUo7blTU/NWmb5p15ZW5jgNBXHgAw4lNYmqzH9C8AiAtcsNOvJzGTdJ0FYEwWw+f7Z2EtyVDYOfhFEMk4M3DgA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@paulmillr%2fqr@0.2.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":192633},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":"https://paulmillr.com/funding/","gitHead":"53b796901cea75c34c5bf0652e7d521ef0561287","scripts":{"lint":"prettier --check index.ts","test":"node test/index.test.js","build":"tsc","format":"prettier --write index.ts"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/qr.git","type":"git"},"_npmVersion":"10.8.1","description":"Minimal node.js & browser QR Code Pattern reader and generator. Supports ascii, term, gif and svg formats","directories":{},"_nodeVersion":"20.14.0","_hasShrinkwrap":false,"devDependencies":{"omggif":"1.0.10","jpeg-js":"0.4.4","prettier":"3.1.1","typescript":"5.3.2","micro-bmark":"0.3.1","micro-should":"0.4.0","@paulmillr/jsbt":"0.1.0"},"_npmOperationalInternal":{"tmp":"tmp/qr_0.2.0_1718496794292_0.5223475260149892","host":"s3://npm-registry-packages"},"deprecated":"The package is now available as \"qr\": npm install qr"},"0.2.1":{"name":"@paulmillr/qr","version":"0.2.1","keywords":["qr","code","qr code","qr pattern","qr generator","qr reader","ascii","gif","svg","camera","file"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"(MIT OR Apache-2.0)","_id":"@paulmillr/qr@0.2.1","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/qr","bugs":{"url":"https://github.com/paulmillr/qr/issues"},"dist":{"shasum":"76ade7080be4ac4824f638146fd8b6db1805eeca","tarball":"https://registry.npmjs.org/@paulmillr/qr/-/qr-0.2.1.tgz","fileCount":16,"integrity":"sha512-IHnV6A+zxU7XwmKFinmYjUcwlyK9+xkG3/s9KcQhI9BjQKycrJ1JRO+FbNYPwZiPKW3je/DR0k7w8/gLa5eaxQ==","signatures":[{"sig":"MEQCIGm7p6HYgxAMo1Ckhf0C2fBhSYJ1pFttfJ1m/TMkHdbyAiBQHorsJTI1CekyjfprSxzKJ/MVi2VDdMyORfHl8GhI7Q==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@paulmillr%2fqr@0.2.1","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":210657},"main":"index.js","type":"module","types":"index.d.ts","module":"index.js","funding":"https://paulmillr.com/funding/","gitHead":"b52c7c581862b92d839270d21474a9d0e084a891","scripts":{"lint":"prettier --check index.ts dom.ts decode.ts","test":"node test/index.test.js","build":"tsc","format":"prettier --write index.ts dom.ts decode.ts"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/qr.git","type":"git"},"_npmVersion":"10.8.3","description":"Minimal node.js & browser QR Code Pattern reader and generator. Supports ascii, term, gif and svg formats","directories":{},"sideEffects":false,"_nodeVersion":"20.17.0","_hasShrinkwrap":false,"devDependencies":{"omggif":"1.0.10","jpeg-js":"0.4.4","prettier":"3.3.2","typescript":"5.5.2","micro-bmark":"0.3.1","micro-should":"0.4.0","@paulmillr/jsbt":"0.2.1"},"_npmOperationalInternal":{"tmp":"tmp/qr_0.2.1_1727822454836_0.4821670271409959","host":"s3://npm-registry-packages"},"deprecated":"The package is now available as \"qr\": npm install qr"},"0.3.0":{"name":"@paulmillr/qr","version":"0.3.0","keywords":["qr","code","qr code","qr pattern","qr generator","qr reader","ascii","gif","svg","camera","file"],"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"(MIT OR Apache-2.0)","_id":"@paulmillr/qr@0.3.0","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"homepage":"https://github.com/paulmillr/qr","bugs":{"url":"https://github.com/paulmillr/qr/issues"},"dist":{"shasum":"6bfc4178eaefc5defb9a3820cbf970aac0b0c2c3","tarball":"https://registry.npmjs.org/@paulmillr/qr/-/qr-0.3.0.tgz","fileCount":26,"integrity":"sha512-3s/cagXuoXTA2gWSfSfJNanNgm2ifmqgoX8WLOs5//3qrIJ3WWHFjqFqCxvYGf46Afwv6PctT9eAOXLDGwp96Q==","signatures":[{"sig":"MEUCIQD66vXtMn8ofyxQqKn7l/Gj/T17vAgBHRbjHNpFRy7nhQIgGMFCYMzzD+8gp0R6PzXB1oKvZ/6BaWP1pXHob3PEoEM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@paulmillr%2fqr@0.3.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":343358},"main":"index.js","types":"index.d.ts","module":"index.js","exports":{".":{"import":"./esm/index.js","require":"./index.js"},"./dom.js":{"import":"./esm/dom.js","require":"./dom.js"},"./decode.js":{"import":"./esm/decode.js","require":"./decode.js"}},"funding":"https://paulmillr.com/funding/","gitHead":"afff28ee80154207a3dda46ca552f1028a4f0fa6","scripts":{"lint":"prettier --check src","test":"node test/index.test.js","build":"tsc && tsc -p tsconfig.esm.json","format":"prettier --write src"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/paulmillr/qr.git","type":"git"},"_npmVersion":"10.9.1","description":"Minimal browser & node.js QR Code Pattern reader and generator. Supports ascii, term, gif and svg formats","directories":{},"sideEffects":false,"_nodeVersion":"20.18.0","_hasShrinkwrap":false,"devDependencies":{"omggif":"1.0.10","jpeg-js":"0.4.4","prettier":"3.3.2","typescript":"5.5.2","micro-bmark":"0.3.1","micro-should":"0.4.0","@paulmillr/jsbt":"0.2.1"},"_npmOperationalInternal":{"tmp":"tmp/qr_0.3.0_1732310328518_0.5346097219256858","host":"s3://npm-registry-packages"},"deprecated":"The package is now available as \"qr\": npm install qr"}},"time":{"created":"2023-03-09T21:31:46.260Z","modified":"2025-03-23T15:38:45.020Z","0.1.0":"2023-03-09T21:31:46.531Z","0.1.1":"2023-05-01T00:19:33.643Z","0.2.0":"2024-06-16T00:13:14.522Z","0.2.1":"2024-10-01T22:40:55.132Z","0.3.0":"2024-11-22T21:18:48.780Z"},"bugs":{"url":"https://github.com/paulmillr/qr/issues"},"author":{"url":"https://paulmillr.com","name":"Paul Miller"},"license":"(MIT OR Apache-2.0)","homepage":"https://github.com/paulmillr/qr","keywords":["qr","code","qr code","qr pattern","qr generator","qr reader","ascii","gif","svg","camera","file"],"repository":{"url":"git+https://github.com/paulmillr/qr.git","type":"git"},"description":"Minimal browser & node.js QR Code Pattern reader and generator. Supports ascii, term, gif and svg formats","maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"readme":"# paulmillr-qr\n\nMinimal browser and node.js QR Code Pattern encoder & decoder.\n\n- 🔒 Auditable, 0-dependency\n- 🏞️ Encoding (generating) supports ASCII, term, gif and svg codes\n- 📷 Decoding (reading) supports camera feed input, files and non-browser environments\n- 🔍 Extensive tests ensure correctness: 100MB+ of vectors\n- 🪶 35KB for encoding + decoding, 18KB for encoding (1000 lines of code)\n\nCheck out interactive demo [paulmillr.com/apps/qr/](https://paulmillr.com/apps/qr/) and\n[qrBTF.com](https://qrbtf.com/en), which uses the library to generate custom, styled codes.\n\nOther JS libraries are bad:\n\n- [jsQR](https://github.com/cozmo/jsQR) is dead, [zxing-js](https://github.com/zxing-js/) is [dead](https://github.com/zxing-js/library/commit/b797504c25454db32aa2db410e6502b6db12a401), [qr-scanner](https://github.com/nimiq/qr-scanner/) uses jsQR and doesn't work outside of browser, [qcode-decoder](https://github.com/cirocosta/qcode-decoder) is broken version of jsQR and doesn't work outside of browser, [qrcode](https://github.com/nuintun/qrcode) is fork of jsQR without adoption\n- [instascan](https://github.com/schmich/instascan) is too big: over 1MB+ (it's zxing compiled to js via emscripten)\n\n## Usage\n\nA standalone file [paulmillr-qr.js](https://github.com/paulmillr/qr/releases) is also available.\n\n> npm install @paulmillr/qr\n\n- [Encoding](#encoding)\n- [Decoding](#decoding)\n  - [Decoding options](#decoding-options)\n  - [Decoding algorithm](#decoding-algorithm)\n  - [Decoding test vectors](#decoding-test-vectors)\n  - [DOM helpers for web apps](#dom-helpers-for-web-apps)\n- [Using with Kotlin](#using-with-kotlin)\n- [Security](#security)\n- [Speed](#speed)\n\n## Encoding\n\n```ts\nimport encodeQR from '@paulmillr/qr';\n\n// import decodeQR from '@paulmillr/qr/decode';\n// See separate README section for decoding.\n\nconst txt = 'Hello world';\nconst ascii = encodeQR(txt, 'ascii'); // Not all fonts are supported\nconst terminalFriendly = encodeQR(txt, 'term'); // 2x larger, all fonts are OK\nconst gifBytes = encodeQR(txt, 'gif'); // Uncompressed GIF\nconst svgElement = encodeQR(txt, 'svg'); // SVG vector image element\nconst array = encodeQR(txt, 'raw'); // 2d array for canvas or other libs\n\n// Options\n// Custom error correction level\n// low: 7%, medium: 15% (default), quartile: 25%, high: 30%\nconst highErrorCorrection = encodeQR(txt, 'gif', { ecc: 'high' });\n// Custom encoding: 'numeric', 'alphanumeric' or 'byte'\nconst customEncoding = encodeQR(txt, 'gif', { encoding: 'byte' });\n// Default scale is 2: each block is 2x2 pixels.\nconst larger = encodeQR(txt, 'gif', { scale: 4 });\n// All options\n// type QrOpts = {\n//   ecc?: 'low' | 'medium' | 'quartile' | 'high';\n//   encoding?: 'numeric' | 'alphanumeric' | 'byte' | 'kanji' | 'eci';\n//   version?: number; // 1..40, QR code version\n//   mask?: number; // 0..7, mask number\n//   border?: number; // Border size, default 2.\n//   scale?: number; // Scale to this number. Scale=2 -> each block will be 2x2 pixels\n// };\n\nconsole.log(ascii);\n> █████████████████████████████████████\n> ██ ▄▄▄▄▄ █  ▀▄▄█ ██▀▄▄▄▄█ ▀█ ▄▄▄▄▄ ██\n> ██ █   █ █▀▄▀▄ ▄▄█▄█ ██▀█▀▀█ █   █ ██\n> ██ █▄▄▄█ ██ ▄▄█▄▀▀ ▀ ██ ▄ ▄█ █▄▄▄█ ██\n> ██▄▄▄▄▄▄▄█ ▀ ▀ █▄▀ ▀ ▀▄█ █ █▄▄▄▄▄▄▄██\n> ██ █  ▀ ▄▄▀▀▀ █▀ ▄   ▀▀▄▀ ▄█ ▀█ ▀▄▄██\n> ██▀▀▀  ▀▄▄██▄▀▀▄█▀ ▀▄█    ▀▀▀ ▄ █▄▄██\n> █████▄▀▀▄▄██ ▀ ▀ ▄▄██▄ ▄▄ ▄ █▀█ █ ███\n> ███   ▄▀▄█▄▄▄█   ▀██▄▄▄▀▀█▄▀ ▄█▀ ████\n> ██▀▀ ▄ ▀▄ ▄▄██▀▄▀▀████▄▄▄ █▄ █  █▀▀██\n> ██▀▀▄ ▄▀▄ ▀▀█▄▀▀▄▄▀▀ █▄▄▀█▀ ▀▄ █▄ ▀██\n> ██▀▄▀██ ▄▄ ▀█▄█▀ ▀ ▀█▄▀▀ █▄▀▀ █  █ ██\n> ███▀█▄▀▄▄ █  █ ██ ██ ▄ █ ▄▄▄ ▄▀▀▄▄ ██\n> ██▄█▄▄▄█▄█ ▄ ▄▀█▀▀ ▄▀ █▀ ▄ ▄▄▄ ▀▄▀▄██\n> ██ ▄▄▄▄▄ █ ▄█▄▀▀ ▀█   █▄█  █▄█ ▀▀▄▀██\n> ██ █   █ █▀ ▄▀█ ██ ▄▄▀██   ▄▄ ▄█   ██\n> ██ █▄▄▄█ █▄  ██▀ ▄▄ ▀█ ▄      ▀▄▄█▀██\n> ██▄▄▄▄▄▄▄█▄███▄█▄█▄▄▄▄█▄█▄████▄▄█████\n> ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n```\n\n## Decoding\n\nGIF reader is not included in the package (it would take a lot of space).\nDecoding raw bitmap is still possible.\n\n```js\nimport encodeQR from '@paulmillr/qr';\nimport decodeQR from '@paulmillr/qr/decode.js';\nimport { Bitmap } from '@paulmillr/qr';\n\n// Scale so it would be 100x100 instead of 25x25\nconst opts = { scale: 4 };\n\n// a) Decode using raw bitmap, dependency-free\nfunction decodeRawBitmap() {\n  const bmBits = encodeQR('Hello world', 'raw', opts);\n  const bm = new Bitmap({ width: bmBits[0].length, height: bmBits.length });\n  bm.data = bmBits;\n  const decoded = decodeQR(bm.toImage());\n  console.log('decoded(pixels)', decoded);\n}\n/*\nOutput:\ndecoded(pixels) Hello world\ndecoded(gif) Hello world\n*/\n\n// b) Decode using external GIF decoder\nimport gif from 'omggif'; // npm install omggif@1.0.10\nfunction parseGIF(image) {\n  const r = new gif.GifReader(image);\n  const data = [];\n  r.decodeAndBlitFrameRGBA(0, data);\n  const { width, height } = r.frameInfo(0);\n  return { width, height, data };\n}\nfunction decodeWithExternal() {\n  const gifBytes = encodeQR('Hello world', 'gif', opts);\n  const decoded = decodeQR(parseGIF(gifBytes));\n  console.log('decoded(gif)', decoded);\n}\n\n// c) draw gif/svg to browser DOM canvas\nimport { svgToPng } from '@paulmillr/qr/dom.js';\nconst png = svgToPng(encodeQR('Hello world', 'svg'), 512, 512);\n```\n\n### Decoding options\n\n```ts\nexport type Point4 = { x: number; y: number }[];\nexport type Image = {\n  height: number;\n  width: number;\n  data: Uint8Array | Uint8ClampedArray | number[];\n};\nexport type DecodeOpts = {\n  // By default we assume that image has 4 channel per pixel (RGBA). isRGB: true will force to use only one\n  isRGB?: boolean;\n  // Returns 4 center (3 finder pattern + 1 alignment pattern) points if detected\n  detectFn?: (points: Point4) => void;\n  // Returns RGBA image of detected QR code\n  qrFn?: (img: Image) => void;\n};\nexport default function decodeQR(img: Image, opts: DecodeOpts = {});\n```\n\n### Decoding algorithm\n\nQR code decoding is challenging; it is essentially a computer vision problem. There are two main scenarios:\n\n- Decoding from files: This can be slow because it needs to handle complicated cases such as blur or rotation.\n- Decoding from a camera feed: This must be fast; even if one frame fails, the next frame can succeed.\n\nThe state-of-the-art approach for this, as with other computer vision problems, is using neural networks. However, using them would make the library hard to audit. Additionally, since JavaScript can't access hardware accelerators, it would likely be very slow. We also avoid using WebGL because it is complex and exposes users to fingerprinting.\n\nThe implemented reader algorithm is inspired by [ZXing](https://github.com/zxing/zxing):\n\n1. `toBitmap`: Convert the image to a bitmap of black and white segments. This is the slowest part and the most important.\n2. `detect`: Find three finder patterns and one alignment pattern (for versions > 1). This is tricky—they can be rotated and distorted by perspective. A square might appear as a quadrilateral with unknown size. The best we can do is count runs of the same color and select patterns with almost the same ratio of runs.\n3. `transform`: Once patterns have been found, correct the perspective and transform the quadrilateral into a square.\n4. `decodeBitmap`: Execute the encoding in reverse: read information via a zig-zag pattern, de-interleave bytes, correct errors, convert to bits, and finally, read segments from bits to create the string.\n5. **Finished!**\n\n### Decoding test vectors\n\nTo test our QR code decoding, we use an excellent dataset\nfrom [BoofCV](http://boofcv.org/index.php?title=Performance:QrCode). BoofCV decodes 73% of the test cases,\nwhile ZXing decodes 49%. Our implementation is nearly at parity with ZXing, primarily because ECI (Extended\nChannel Interpretation) support is not yet included. The test vectors are preserved in a Git repository at\n[github.com/paulmillr/qr-code-vectors](https://github.com/paulmillr/qr-code-vectors).\n\n**Note for Testing on iOS Safari:** Accessing the camera on iOS Safari requires HTTPS. This means that the file: protocol or non-encrypted http cannot be used. Ensure your testing environment uses https:.\n\nThe QR code specification is available for purchase at [iso.org](https://www.iso.org/standard/62021.html) for 200 CHF.\n\n### DOM helpers for web apps\n\nCheck out `dom.ts` for browser-related camera code that would make your apps simpler.\n\n## Using with Kotlin\n\n```kotlin\n@JsModule(\"@paulmillr/qr\")\n@JsNonModule\nexternal object Qr {\n    @JsName(\"default\")\n    fun encodeQR(text: String, output: String = definedExternally, opts: dynamic = definedExternally): Uint8Array\n}\n\n// then\nval bytes = Qr.encodeQR(\"text\", \"gif\", js(\"{ scale: 10 }\"))\nval blob = Blob(arrayOf(bytes), BlobPropertyBag(\"image/gif\"))\nval imgSrc = URL.createObjectURL(blob)\n```\n\n## Security\n\nThere are multiple ways a single text can be encoded in a QR code, which can lead to potential security implications:\n\n- **Segmentation Differences:** For example, `abc123` can be encoded as:\n  `[{type: 'alphanum', data: 'abc'}, {type: 'num', data: '123'}]` or `[{type: 'alphanum', data: 'abc123'}]`\n- **Mask Selection Algorithms:** Different libraries may use different algorithms for mask selection.\n- **Default Settings:** Variations in error correction levels and how many bits are stored before upgrading versions.\n\nIf an adversary can access multiple QR codes generated from a specific library, they may be able to fingerprint the user. This fingerprinting could be used to exfiltrate data from air-gapped systems. In such cases, the adversary would need to create a library-specific exploit.\n\nWe mitigate these risks by:\n\n- **Cross-Testing:** We currently cross-test against python-qrcode, which is closer to the specification\n  than some JavaScript implementations.\n- **Single Segment Encoding:** We always use single-segment encoding.\n  While this may not be the most optimal for performance, it reduces the amount of fingerprinting data.\n\nFuture plans:\n\n- **Testing Against Multiple Libraries:** To further improve security and reduce fingerprinting, we can\n  cross-test against three to four popular libraries.\n\n## Speed\n\nBenchmarks measured with Apple M2 on MacOS 13 with node.js 19.\n\n```\n======== encode/ascii ========\nencode/paulmillr-qr x 1,794 ops/sec @ 557μs/op\nencode/qrcode-generator x 3,128 ops/sec @ 319μs/op ± 1.12% (min: 293μs, max: 3ms)\nencode/nuintun x 1,872 ops/sec @ 533μs/op\n======== encode/gif ========\nencode/paulmillr-qr x 1,771 ops/sec @ 564μs/op\nencode/qrcode-generator x 1,773 ops/sec @ 563μs/op\nencode/nuintun x 1,883 ops/sec @ 530μs/op\n======== encode: big ========\nencode/paulmillr-qr x 87 ops/sec @ 11ms/op\nencode/qrcode-generator x 124 ops/sec @ 8ms/op\nencode/nuintun x 143 ops/sec @ 6ms/op\n======== decode ========\ndecode/paulmillr-qr x 96 ops/sec @ 10ms/op ± 1.39% (min: 9ms, max: 32ms)\ndecode/jsqr x 34 ops/sec @ 28ms/op\ndecode/nuintun x 35 ops/sec @ 28ms/op\ndecode/instascan x 79 ops/sec @ 12ms/op ± 6.73% (min: 9ms, max: 223ms)\n======== Decoding quality ========\nblurred(45):  paulmillr-qr=12 (26.66%) jsqr=13 (28.88%) nuintun=13 (28.88%) instascan=11 (24.44%)\n```\n\n## License\n\nCopyright (c) 2023 Paul Miller (paulmillr.com)\n\nCopyright (c) 2019 ZXing authors\n\nThe library @paulmillr/qr is dual-licensed under the Apache 2.0 OR MIT license.\nYou can select a license of your choice.\n\nThe library contains code inspired by [ZXing](https://github.com/zxing/zxing), which is licensed under Apache 2.0.\n\nThe license to the use of the QR Code stipulated by JIS (Japanese Industrial Standards) and the ISO are not necessary.\nThe specification for QR Code has been made available for use by any person or organization. (Obtaining QR Code Specification)\nThe word “QR Code” is registered trademark of DENSO WAVE INCORPORATED in Japan and other countries.\nTo use the word “QR Code” in your publications or web site, etc, please indicate a sentence QR Code is registered trademark of DENSO WAVE INCORPORATED.\nThis registered trademark applies only for the word “QR Code”, and not for the QR Code pattern (image).\n(https://www.qrcode.com/en/faq.html)\n","readmeFilename":"README.md"}